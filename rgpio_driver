#!/bin/sh

### BEGIN INIT INFO
# Short-Description: Driver to send Relays values and read Digital Inputs in loop for ever
# Description:       rgpio is used to connect external Relay box with ModBus/RTU control
### END INIT INFO

exec 2>&1


conf_unit1_relay="/data/WSRemoteGPIO/FileSets/Conf/Relays_unit1.conf"
conf_unit1_digitalinput="/data/WSRemoteGPIO/FileSets/Conf/Digital_Inputs_unit1.conf"
conf_unit2_relay="/data/WSRemoteGPIO/FileSets/Conf/Relays_unit2.conf"
conf_unit2_digitalinput="/data/WSRemoteGPIO/FileSets/Conf/Digital_Inputs_unit2.conf"
conf_unit3_relay="/data/WSRemoteGPIO/FileSets/Conf/Relays_unit3.conf"
conf_unit3_digitalinput="/data/WSRemoteGPIO/FileSets/Conf/Digital_Inputs_unit3.conf"
zero=0
prev_const1=0
prev_const2=0
prev_const3=0
prev_statea=0
prev_stateb=0
prev_statec=0
timer=$(date +%s)

##
## Handle Dbus Settings
###############################
get_setting()
	{
		dbus-send --print-reply=literal --system --type=method_call --dest=com.victronenergy.settings $1 com.victronenergy.BusItem.GetValue | awk '/int32/ { print $3 }'
	}

set_setting()
	{
		dbus-send --print-reply=literal --system --type=method_call --dest=com.victronenergy.settings $1 com.victronenergy.BusItem.SetValue $2 >> /dev/null
	}

get_string()
	{
		dbus-send --print-reply=literal --system --type=method_call --dest=com.victronenergy.settings $1 com.victronenergy.BusItem.GetValue | awk '/variant/ { print $2 }'
	}

readrelays1=$(get_setting /Settings/WSRemoteGPIO/Unit1/ReadRelays)
readdigin1=$(get_setting /Settings/WSRemoteGPIO/Unit1/ReadDigin)
readrelays2=$(get_setting /Settings/WSRemoteGPIO/Unit2/ReadRelays)
readdigin2=$(get_setting /Settings/WSRemoteGPIO/Unit2/ReadDigin)
readrelays3=$(get_setting /Settings/WSRemoteGPIO/Unit3/ReadRelays)
readdigin3=$(get_setting /Settings/WSRemoteGPIO/Unit3/ReadDigin)


##
## Handle up to 3 units and multi-protocol
###########################################

nbunit=$(get_setting /Settings/WSRemoteGPIO/NumberUnits)
if [[ $nbunit -gt $zero ]]
then
	# One unit. Reading Protocol, port and IP address
	Protocol_unit1=$(get_setting /Settings/WSRemoteGPIO/Unit1/Protocol)
	Port_Unit1=$(get_string /Settings/WSRemoteGPIO/Unit1/USB_Port)
	IP_Unit1=$(get_string /Settings/WSRemoteGPIO/Unit1/IP)
else
	Protocol_unit1=
	Port_Unit1=
	IP_Unit1=
fi
if [[ $nbunit -gt 1 ]]
then
	# Two unit. Reading Protocol, port and IP address
	Protocol_unit2=$(get_setting /Settings/WSRemoteGPIO/Unit2/Protocol)
	Port_Unit2=$(get_string /Settings/WSRemoteGPIO/Unit2/USB_Port)
	IP_Unit2=$(get_string /Settings/WSRemoteGPIO/Unit2/IP)
else
	Protocol_unit2=
	Port_Unit2=
	IP_Unit2=
fi
if [[ $nbunit -gt $2 ]]
then
	# Three unit. Reading Protocol, port and IP address
	Protocol_unit3=$(get_setting /Settings/WSRemoteGPIO/Unit3/Protocol)
	Port_Unit3=$(get_string /Settings/WSRemoteGPIO/Unit3/USB_Port)
	IP_Unit3=$(get_string /Settings/WSRemoteGPIO/Unit3/IP)
else
	Protocol_unit1=
	Port_Unit1=
	IP_Unit1=
fi			

##
## Main loop
###############################
while true
do


	##
	## Handle Unit1 with up to 8x Relays 
	#################################
	index=1
	i=1
	j=256
	const=0
	for Relay in `cat $conf_unit1_relay`
	do
		value=`cat $Relay`
		if [[ $value -eq $zero ]]
		then
			const=$((const+j))
		else
			const=$((const+j+i))
		fi
		index=$((index+1))
		i=$((i*2))
        j=$((256*i))
	done

	# Trying to limit resources usage so talking to Unit only if relay change
	if [[ $const != $prev_const1 ]]
		then
			case $Protocol_unit1 in
				0) # RS485
					/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m rtu -b 115200 -p none -d 8 -1 -r 3 -s 1 -c 1 -a 1 $Port_Unit1 $const >> /dev/null
					;;
				1) # TCP
					/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m enc -1 -r 3 -c 1 -a 1 $IP_Unit1 $const >> /dev/null
					;;
			esac
			prev_const1=$((const))
	fi

    	##                                                                             
        ## Handle Unit2 with up to 8x Relays                                                 
        #################################                                              
        if [[ $nbunit -eq 2 || $nbunit -eq 3 ]]; then
        	index=1
        	i=1
        	j=256
        	const=0
        	for Relay in `cat $conf_unit2_relay`
        	do
        	        value=`cat $Relay`
        	        if [ $value -eq $zero ]
        	        then
        	                const=$((const+j))
        	        else
        	                const=$((const+j+i))
        	        fi
        	        index=$((index+1))
        	        i=$((i*2))
        	        j=$((256*i))
        	done

			# Trying to limit resources usage so talking to Unit only if relay change
        	if [ $const != $prev_const2 ]; then
				case $Protocol_unit2 in
					0) # RS485
						/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m rtu -b 115200 -p none -d 8 -1 -r 3 -s 1 -c 1 -a 2 $Port_Unit2 $const >> /dev/null
						;;
					1) # TCP
						/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m enc -1 -r 3 -c 1 -a 2 $IP_Unit2 $const >> /dev/null
						;;
				esac
        	fi
        	prev_const2=$((const))
		fi

		##
        ## Handle Unit3 with up to 8x Relays
        #################################
        if [[ $nbunit -eq 3 ]]; then
        	index=1
        	i=1
        	j=256
        	const=0
        	for Relay in `cat $conf_unit3_relay`
        	do
        	    value=`cat $Relay`
        	    if [ $value -eq $zero ]; then
        	        const=$((const+j))
        	    else
        	        const=$((const+j+i))
        	    fi
        	    index=$((index+1))
        	    i=$((i*2))
        	    j=$((256*i))
        	done

			# Trying to limit resources usage so talking to Unit only if relay change
        	if [ $const != $prev_const3 ]
        	then
				case $Protocol_unit3 in
					0) # RS485
						/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m rtu -b 115200 -p none -d 8 -1 -r 3 -s 1 -c 1 -a 3 $Port_Unit3 $const >> /dev/null
						;;
					1) # TCP
						/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m enc -1 -r 3 -c 1 -a 3 $IP_Unit3 $const >> /dev/null
						;;
				esac
        	fi
        	prev_const3=$((const))
		fi


		##
		## Handle Unit1 with up to 8x Digital_Inputs
		#################################
	if [[ $readdigin1 -eq 1 ]]; then
			case $Protocol_unit1 in
				0) # RS485
					msg=$(echo -n $(/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m rtu -b 115200 -p none -d 8 -1 -r 11 -s 1 -c 1 -a 1 $Port_Unit1) | awk '{print $NF}')
					number=$(($msg))
					;;
				1) # TCP
					msg=$(echo -n $(/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m enc -1 -r 11 -c 1 -a 1 $IP_Unit1) | awk '{print $NF}')
					number=$(($msg))
					;;
			esac

		if ((number >= 0 && number <= 255)); then

			# Parsing number for writing the Input Devices
	        	i=1
	        	for Digital_Input in `cat $conf_unit1_digitalinput`
	        	do
					echo $((($number & $i) != 0)) > $Digital_Input
					i=$((i*2))
				done
    	fi
	fi

		##
        	## Handle Unit2 with up to 8x Digital_Inputs
        	#################################
	if [[ $readdigin2 -eq 1 ]]; then
		if [[ $nbunit -eq 2 || $nbunit -eq 3 ]]
        	then
				case $Protocol_unit2 in
					0) # RS485
						msg=$(echo -n $(/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m rtu -b 115200 -p none -d 8 -1 -r 11 -s 1 -c 1 -a 2 $Port_Unit2) | awk '{print $NF}')
						number=$(($msg))
						;;
					1) # TCP
						msg=$(echo -n $(/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m enc -1 -r 11 -c 1 -a 2 $IP_Unit2) | awk '{print $NF}')
						number=$(($msg))
						;;
				esac

        		if ((number >= 0 && number <= 255)); then
            
        	    	# Parsing number for writing the Input Devices
                	i=1
                	for Digital_Input in `cat $conf_unit2_digitalinput`
                	do
                		echo $((($number & $i) != 0)) > $Digital_Input
                    	i=$((i*2))
					done
        		fi
		
		fi
	fi

		##
        	## Handle Unit3 with up to 8x Digital_Inputs
        	#################################
	if [[ $readdigin3 -eq 1 ]]; then
		if [[ $nbunit -eq 3 ]]
        	then
				case $Protocol_unit3 in
					0) # RS485
						msg=$(echo -n $(/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m rtu -b 115200 -p none -d 8 -1 -r 11 -s 1 -c 1 -a 3 $Port_Unit3) | awk '{print $NF}')
						number=$(($msg))
						;;
					1) # TCP
						msg=$(echo -n $(/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m enc -1 -r 11 -c 1 -a 3 $IP_Unit3) | awk '{print $NF}')
						number=$(($msg))
						;;
				esac
            
        		if ((number >= 0 && number <= 255)); then
            
        	    	# Parsing number for writing the Input Devices
                	i=1
                	for Digital_Input in `cat $conf_unit3_digitalinput`
                	do
                		echo $((($number & $i) != 0)) > $Digital_Input
                    	i=$((i*2))
					done


        		fi
		fi
	fi


	if [[ $readrelays1 -eq 1 ]]; then
			##
			## Handle reading relays Unit1 with up to 8x Relays
			#################################
			case $Protocol_unit1 in
				0) # RS485
					msg=$(echo -n $(/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m rtu -b 115200 -p none -d 8 -1 -r 2 -s 1 -c 1 -a 1 $Port_Unit1) | awk '{print $NF}')
					number=$(($msg))
					;;
				1) # TCP
					msg=$(echo -n $(/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m enc -1 -r 2 -c 1 -a 1 $IP_Unit1) | awk '{print $NF}')
					number=$(($msg))
					;;
			esac
        
		if (( number >= 0 && number <= 255 && number != prev_statea )); then

			# Parsing number for writing the Relay Status
	    	i=1
	    	for Relay in `cat $conf_unit1_relay`
	    	do
				echo $((($number & $i) != 0)) > $Relay
				i=$((i*2))
			done
			prev_statea=$((number))
    	fi
	fi

		##
		## Handle reading relays Unit2 with up to 8x Relays
		#################################
	if [[ $readrelays2 -eq 1 ]]; then
		if [[ $nbunit -eq 2 || $nbunit -eq 3 ]]; then
				case $Protocol_unit2 in
					0) # RS485
						msg=$(echo -n $(/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m rtu -b 115200 -p none -d 8 -1 -r 2 -s 1 -c 1 -a 2 $Port_Unit2) | awk '{print $NF}')
						number=$(($msg))
						;;
					1) # TCP
						msg=$(echo -n $(/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m enc -1 -r 2 -c 1 -a 2 $IP_Unit2) | awk '{print $NF}')
						number=$(($msg))
						;;
				esac
        
			if (( number >= 0 && number <= 255 && number != prev_stateb )); then

				# Parsing number for writing the Relay Status
	    		i=1
	    		for Relay in `cat $conf_unit2_relay`
	    		do
					echo $((($number & $i) != 0)) > $Relay
					i=$((i*2))
				done
				prev_stateb=$((number))
    		fi
		fi
	fi


		##
		## Handle reading relays Unit3 with up to 8x Relays
		#################################
	if [[ $readrelays3 -eq 1 ]]; then
		if [[ $nbunit -eq 3 ]]; then
				case $Protocol_unit3 in
					0) # RS485
						msg=$(echo -n $(/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m rtu -b 115200 -p none -d 8 -1 -r 2 -s 1 -c 1 -a 3 $Port_Unit3) | awk '{print $NF}')
						number=$(($msg))
						;;
					1) # TCP
						msg=$(echo -n $(/data/WSRemoteGPIO/bin/modpoll/arm-linux-gnueabihf/modpoll -m enc -1 -r 2 -c 1 -a 3 $IP_Unit3) | awk '{print $NF}')
						number=$(($msg))
						;;
				esac
			if (( number >= 0 && number <= 255 && number != prev_statec )); then
				# Parsing number for writing the Relay Status
	    		i=1
	    		for Relay in `cat $conf_unit3_relay`
	    		do
					echo $((($number & $i) != 0)) > $Relay
					i=$((i*2))
				done
				prev_statec=$((number))
    		fi
		fi
	fi

	##
	## Latency vs CPU load
	#################################
#    sleep 0.1



	##
	## Heart Beat
	################################
	if (( (timer + 5) < $(date +%s) ))
	then
		timer=$(date +%s)
		set_setting /Settings/Watchdog/WSRemoteGPIO variant:int32:$timer
		echo "Heartbeat = "$(date -d@$timer)
	fi



done
